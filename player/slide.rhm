#lang rhombus/static/and_meta
import:
  slideshow.slide
  slideshow.retract_recent
  pict      
  "state.rhm" open
  "card.rhm" open
  "pict.rhm" open
  "json.rhm"

fun fit_on_screen(p :~ pict.Pict):
  let s = math.min((1360-40) / p.width, (766-40) / p.height)
  if s < 1
  | p.scale(s)
  | p

fun tournament_result([[player_exe, wins, forfiets, draws], ...]):
  def t = pict.text
  pict.table([[t("player"),
               t("wins"),
               t("forfiets"),
               t("draws")],
              [t(player_exe),
               t(to_string(wins)),
               t(to_string(forfiets)),
               t(to_string(draws))],
              ...])

fun state_slide_name(s :: State):
  match s.phase
  | End(index):
      if index
      | "Player " +& index +& " Wins"
      | "Draw"
  | Fault(index, _):
      "Player " +& index +& " Faults"
  | ~else:
      "..."

recur loop(v = json.read(), ~player_names: player_names = []):
  match v
  | _ when v == Port.eof:
      #void
  | { #'meta: "players", &m }:        
      loop(json.read(), ~player_names: m[#'names])
  | { #'meta: "record", &m }:
      slide(~name: "End",
            tournament_result(m[#'players]))
      loop(json.read())
  | v :: Map:
      let s = map_to_state(v)
      let player_index = v.get(#'player, #false)
      let vs = ViewState(s, player_index, ~player_names: player_names)
      let view = game_view(vs)
      slide(~name: state_slide_name(s),
            fit_on_screen(view.pict))

      let next_v = json.read()
      match next_v
      | _ :: Map:
          loop(next_v)
      | _ when next_v == Port.eof:
          loop(next_v)
      | ~else:
          let [next_v] = next_v // remove JSON array wrapper
          let vs:
            cond
            | next_v is_a String:
                if next_v != "Pass"
                | vs with (selected_shop_card = lookup_card(next_v))
                | vs
            | ~else:
                match state_mode(s, player_index)
                | #'investing:
                    let new_p_vs:
                      vs.players[player_index] with (selected_coins = next_v)
                    vs with (players = vs.players.set(player_index, new_p_vs))
                | #'attacking || #'defending:
                    if next_v != 0 // 0 means "pass"
                    | let new_p_vs:
                        vs.players[player_index] with (selected_card_index = next_v)
                      vs with (players = vs.players.set(player_index, new_p_vs))
                    | vs
                | ~else:
                    vs
          retract_recent()
          slide(~name: "...", fit_on_screen(game_view(vs).pict))
          loop(json.read())
