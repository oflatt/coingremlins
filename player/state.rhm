#lang rhombus/static
import:
  "card.rhm" open

export:
  all_defined

class BoughtCard(card :: Card,
                 uses :: Int = 0) // attacks or defends

class Player(coins :: Int,
             buys :: Int,
             cards :: List.of(BoughtCard)) // [] => out, otherwise starts with `stipend`

class Phase():
  nonfinal
  abstract rep()

class Income():
  extends Phase
  override rep(): { #'name: "income" }
  fun unrep(_): Income()
  export unrep

class Investing(investments :: List.of(maybe(Int))):
  extends Phase
  override rep(): { #'name: "investing" }
  fun unrep(_, players :~ List): Investing(players.map(fun (p): #false))
  export unrep

class Attacking(attacker_index :: Int,
                // #false until the attacker selects
                attacker_card_index :: maybe(Int),
                // will have #false for attacker, and
                // initialized to 0 for a defender with
                // no cards to defend with:
                defender_card_indexes :: List.of(maybe(Int))):
  extends Phase
  override rep(): {
                    #'name: "attacking",
                    #'attacker: attacker_index,
                    #'attacker_card: attacker_card_index
                  }
  fun unrep({ #'attacker: attacker_index,
              #'attacker_card: attacker_card_index },
            players :~ List):
    Attacking(attacker_index,
              attacker_card_index,
              players.map(fun (p): #false))
  export unrep
  
class Buy(buy_cards :: List.of(maybe(Card))):
  extends Phase
  override rep(): {
                    #'name: "buy",
                  }  
  fun unrep(_, players :~ List):
    Buy(players.map(fun (p): #false))
  export unrep

class End(winner_index):
  extends Phase
  override rep(): {
                    #'name: "end",
                    #'winner: winner_index
                  }
  fun unrep({#'winner: winner_index}, _): End(winner_index)
  export unrep

class State(day :: Int.in(1, 3 ~inclusive),
            phase :: Phase,
            shop :: Map.of(Card, Int),
            players :: List.of(Player),
            data)

fun make_game(number_of_players :: Int,
              ~data = #false,
              ~simple = #false) :~ State:
  State(
    1,
    Income(),
    for Map (c: (if simple | simple_shop_cards | all_shop_cards) :~ List.of(Card)):
      values(c, c.per_player * number_of_players),
    for List (i: 0..number_of_players):
      Player(0, 0, [BoughtCard(stipend)]),
    data
  )

fun new_day(s :: State) :~ State:
  s with (day = (s.day mod 3) + 1,
          phase = Income())

fun state_to_map(State(day,
                       phase,
                       { card: card_n, ... },
                       [Player(player_coins,
                               player_buys,
                               [BoughtCard(player_card, player_card_uses), ...]),
                        ...],
                       _)) :~ Map:
  {
    #'day: day,
    #'phase: phase.rep(),
    #'shop: { Symbol.from_string(card.name): card_n, ...},
    #'players: [{ #'coins: player_coins,
                  #'buys: player_buys,
                  #'cards: [{ #'name: player_card.name,
                              #'uses: player_card_uses },
                            ...] },
                ...]
  }

fun map_to_state(m :: Map) :~ State:
  match m
  | { #'day: day,
      #'phase: phase,
      #'shop: { card_name_sym: card_n, ... },
      #'players: [{ #'coins: player_coins,
                    #'buys: player_buys,
                    #'cards: [{ #'name: player_card_name,
                                #'uses: player_card_uses },
                              ...] },
                  ... ] }:
      let players = [Player(player_coins,
                            player_buys,
                            [BoughtCard(lookup_card(player_card_name), player_card_uses),
                             ...]),
                     ...]
      State(day,
            match phase
            | { #'name: "income" }: Income.unrep(phase)
            | { #'name: "investing" }: Investing.unrep(phase, players)
            | { #'name: "attacking" }: Attacking.unrep(phase, players)
            | { #'name: "buy" }: Buy.unrep(phase, players)
            | { #'name: "end" }: End.unrep(phase, players),
            { lookup_card(to_string(card_name_sym)): card_n , ... },
            players,
            #false)
  