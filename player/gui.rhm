#lang rhombus/static
import:
  rhombus/gui
  rhombus/draw
  pict
  lib("pict/main.rkt") as rkt
  "state.rhm" open
  "income.rhm" open
  "investing.rhm" open
  "pict.rhm" open

// incomplete, but an idea about how a GUI might work

let s = make_game(2)
let s = income(s)
let s = start_investing(s)
let content = gui.Obs(ViewState(s, 0))
let graphic = gui.Obs(#false)

fun render_to_size(vs :: ViewState, w, h):
  let view = game_view(vs)
  let p = view.pict
  let s = math.min((w - 20) / p.width, (h - 20) / p.height)
  let p = p.scale(s)
  let dx = (w - p.width) / 2
  let dy = (h - p.height) / 2
  [view, p, dx, dy]

fun draw(dc :: draw.DC, content):
  let draw.Size(w, h) = dc.size
  let [view, p, dx, dy] = render_to_size(content, w, h)
  rkt.#{draw-pict}(p, dc.handle, dx, dy)

fun on_mouse(ev :: gui.MouseEvent, area :: gui.CanvasArea):
  when ev.kind == #'left_down
  | let vs :: ViewState = content.value
    let draw.Size(w, h) = area.client_size
    let [view :~ View, p, dx, dy] = render_to_size(content.value, w, h)
    fun is_hit(cp):
      let (cl, ct) = pict.Find.left_top(cp).in(p)
      let (cr, cb) = pict.Find.right_bottom(cp).in(p)
      ev.x >= cl+dx && ev.x <= cr+dx && ev.y >= ct+dy && ev.y <= cb+dy
    let new_vs = vs
    let mode = state_mode(vs.s, vs.player_index) 
    let new_vs:
      for values(new_vs :~ ViewState = new_vs) (p: vs.s.players,
                                                p_vs: vs.players,
                                                i: 0..):
        cond
        | mode == #'investing && vs.player_index == i && is_hit(view.players[i].coins):
            let coins = p_vs.selected_coins
            let coins_dir = p_vs.coins_dir
            let new_coins_dir:
              cond
              | coins == 0: #'up
              | coins == p.coins: #'down
              | ~else: coins_dir
            let new_coins = math.min(p.coins, math.max(0, (coins || 0) + (if new_coins_dir == #'up | 1 | -1)))
            let new_p_vs = p_vs with (selected_coins = new_coins,
                                      coins_dir = new_coins_dir)
            new_vs with (players = new_vs.players.set(i, new_p_vs))
        | ~else:
            new_vs
    let new_vs:
      if mode == #'buy
      | for values(new_vs :~ ViewState = new_vs) ((c, n): vs.s.shop):
          let cp = card_picts[c]
          if is_hit(cp)
          | new_vs with (selected_shop_card = c)
          | new_vs
      | new_vs
    when (new_vs != vs) | content.value := new_vs

def canvas:
  gui.Canvas(content, draw,
             ~mouse: on_mouse)

gui.render(gui.Window(canvas,
                      ~size: [800, 600]))
