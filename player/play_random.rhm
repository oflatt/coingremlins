#lang rhombus/static
import:
  "state.rhm" open
  "phase.rhm" open
  "json.rhm"
  lib("racket/base.rkt").random

recur loop():
  let s_json :~ Map = json.read()
  unless s_json == Port.eof
  | let s = map_to_state(s_json)
    let me_index = s_json[#'player]
    let me = s.players[me_index]
    let candidate_moves :~ List:
      match s.phase
      | phase :: Investing:
          possible_investing_moves(s, me)
      | phase :: Attacking:
          if (phase.attacker_index == me_index)
          | possible_attacking_moves(s, me)
          | possible_defending_moves(s, me)
      | phase :: Buy:
          possible_buy_moves(s, me).remove("Pass")
    let move = candidate_moves[random(candidate_moves.length())]
    json.write([move])
    loop()
